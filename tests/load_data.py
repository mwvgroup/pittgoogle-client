import random
from pathlib import Path

import attrs

import pittgoogle


@attrs.define(kw_only=True)
class TestAlert:
    """Container for a single sample alert."""

    path: Path | None = attrs.field(default=None)
    dict_: dict | None = attrs.field(default=None)
    schema_name: str | None = attrs.field(default=None)
    schema_version: str | None = attrs.field(default=None)
    survey: str | None = attrs.field(default=None)

    @property
    def pgalert(self) -> pittgoogle.Alert:
        return pittgoogle.Alert.from_dict(self.dict_, schema_name=self.schema_name)


@attrs.define(kw_only=True)
class RandomLsst:
    """Generate random data using LSST schema."""

    def to_testalert(self) -> TestAlert:
        """Return an alert with non-null values for all fields."""
        return TestAlert(
            survey="lsst",
            schema_name="lsst.v7_4.alert",
            dict_={
                "alertId": random.randint(1, 1000),
                "diaSource": self.dia_source(),
                "prvDiaSources": [self.dia_source() for _ in range(3)],
                "prvDiaForcedSources": [self.dia_forced_source() for _ in range(3)],
                "prvDiaNondetectionLimits": [self.dia_nondetection_limit() for _ in range(3)],
                "diaObject": self.dia_object(),
                "ssObject": self.ss_object(),
                "cutoutDifference": bytes(random.getrandbits(8) for _ in range(10)),
                "cutoutScience": bytes(random.getrandbits(8) for _ in range(10)),
                "cutoutTemplate": bytes(random.getrandbits(8) for _ in range(10)),
            },
        )

    def to_minimal_testalert(self) -> TestAlert:
        """Return an alert with `None` for all fields that are allowed to be null."""
        return TestAlert(
            survey="lsst",
            schema_name="lsst.v7_4.alert",
            dict_={
                "alertId": random.randint(1, 1000),
                "diaSource": self.dia_source(),
                "prvDiaSources": None,
                "prvDiaForcedSources": None,
                "prvDiaNondetectionLimits": None,
                "diaObject": None,
                "ssObject": None,
                "cutoutDifference": None,
                "cutoutScience": None,
                "cutoutTemplate": None,
            },
        )

    @staticmethod
    def band() -> str:
        return random.choice(["u", "g", "r", "i", "z", "y"])

    @staticmethod
    def dia_object() -> dict:
        return {
            "diaObjectId": random.randint(10000, 20000),
            "ra": random.uniform(0, 360),
            "raErr": random.uniform(0, 1),
            "dec": random.uniform(-90, 90),
            "decErr": random.uniform(0, 1),
            "ra_dec_Cov": random.uniform(-0.1, 0.1),
            "radecMjdTai": random.uniform(55000, 60000),
            "pmRa": random.uniform(-0.1, 0.1),
            "pmRaErr": random.uniform(0, 0.01),
            "pmDec": random.uniform(-0.1, 0.1),
            "pmDecErr": random.uniform(0, 0.01),
            "parallax": random.uniform(-0.01, 0.01),
            "parallaxErr": random.uniform(0, 0.001),
            "pmRa_pmDec_Cov": random.uniform(-0.0001, 0.0001),
            "pmRa_parallax_Cov": random.uniform(-0.00001, 0.00001),
            "pmDec_parallax_Cov": random.uniform(-0.00001, 0.00001),
            "pmParallaxLnL": random.uniform(-10, 0),
            "pmParallaxChi2": random.uniform(0, 100),
            "pmParallaxNdata": random.randint(10, 100),
            "u_psfFluxMean": random.uniform(10, 1000),
            "u_psfFluxMeanErr": random.uniform(0, 10),
            "u_psfFluxSigma": random.uniform(0, 20),
            "u_psfFluxChi2": random.uniform(0, 50),
            "u_psfFluxNdata": random.randint(5, 50),
            "u_fpFluxMean": random.uniform(10, 1000),
            "u_fpFluxMeanErr": random.uniform(0, 10),
            "u_fpFluxSigma": random.uniform(0, 20),
            "g_psfFluxMean": random.uniform(10, 1000),
            "g_psfFluxMeanErr": random.uniform(0, 10),
            "g_psfFluxSigma": random.uniform(0, 20),
            "g_psfFluxChi2": random.uniform(0, 50),
            "g_psfFluxNdata": random.randint(5, 50),
            "g_fpFluxMean": random.uniform(10, 1000),
            "g_fpFluxMeanErr": random.uniform(0, 10),
            "g_fpFluxSigma": random.uniform(0, 20),
            "r_psfFluxMean": random.uniform(10, 1000),
            "r_psfFluxMeanErr": random.uniform(0, 10),
            "r_psfFluxSigma": random.uniform(0, 20),
            "r_psfFluxChi2": random.uniform(0, 50),
            "r_psfFluxNdata": random.randint(5, 50),
            "r_fpFluxMean": random.uniform(10, 1000),
            "r_fpFluxMeanErr": random.uniform(0, 10),
            "r_fpFluxSigma": random.uniform(0, 20),
            "i_psfFluxMean": random.uniform(10, 1000),
            "i_psfFluxMeanErr": random.uniform(0, 10),
            "i_psfFluxSigma": random.uniform(0, 20),
            "i_psfFluxChi2": random.uniform(0, 50),
            "i_psfFluxNdata": random.randint(5, 50),
            "i_fpFluxMean": random.uniform(10, 1000),
            "i_fpFluxMeanErr": random.uniform(0, 10),
            "i_fpFluxSigma": random.uniform(0, 20),
            "z_psfFluxMean": random.uniform(10, 1000),
            "z_psfFluxMeanErr": random.uniform(0, 10),
            "z_psfFluxSigma": random.uniform(0, 20),
            "z_psfFluxChi2": random.uniform(0, 50),
            "z_psfFluxNdata": random.randint(5, 50),
            "z_fpFluxMean": random.uniform(10, 1000),
            "z_fpFluxMeanErr": random.uniform(0, 10),
            "z_fpFluxSigma": random.uniform(0, 20),
            "y_psfFluxMean": random.uniform(10, 1000),
            "y_psfFluxMeanErr": random.uniform(0, 10),
            "y_psfFluxSigma": random.uniform(0, 20),
            "y_psfFluxChi2": random.uniform(0, 50),
            "y_psfFluxNdata": random.randint(5, 50),
            "y_fpFluxMean": random.uniform(10, 1000),
            "y_fpFluxMeanErr": random.uniform(0, 10),
            "y_fpFluxSigma": random.uniform(0, 20),
            "nearbyObj1": random.randint(10000, 20000),
            "nearbyObj1Dist": random.uniform(0, 1),
            "nearbyObj1LnP": random.uniform(-10, 0),
            "nearbyObj2": random.randint(10000, 20000),
            "nearbyObj2Dist": random.uniform(0, 1),
            "nearbyObj2LnP": random.uniform(-10, 0),
            "nearbyObj3": random.randint(10000, 20000),
            "nearbyObj3Dist": random.uniform(0, 1),
            "nearbyObj3LnP": random.uniform(-10, 0),
            "u_psfFluxErrMean": random.uniform(0, 10),
            "g_psfFluxErrMean": random.uniform(0, 10),
            "r_psfFluxErrMean": random.uniform(0, 10),
            "i_psfFluxErrMean": random.uniform(0, 10),
            "z_psfFluxErrMean": random.uniform(0, 10),
            "y_psfFluxErrMean": random.uniform(0, 10),
        }

    @staticmethod
    def dia_source() -> dict:
        return {
            "diaSourceId": random.randint(1, 1000),
            "visit": random.randint(100000, 200000),
            "detector": random.randint(1, 189),
            "diaObjectId": random.randint(10000, 20000),
            "ssObjectId": random.randint(30000, 40000),
            "parentDiaSourceId": random.randint(50000, 60000),
            "midpointMjdTai": random.uniform(58000, 60000),
            "ra": random.uniform(0, 360),
            "raErr": random.uniform(0, 0.1),
            "dec": random.uniform(-90, 90),
            "decErr": random.uniform(0, 0.1),
            "ra_dec_Cov": random.uniform(-0.01, 0.01),
            "x": random.uniform(0, 4000),
            "xErr": random.uniform(0, 1),
            "y": random.uniform(0, 4000),
            "yErr": random.uniform(0, 1),
            "x_y_Cov": random.uniform(-1, 1),
            "centroid_flag": random.choice([True, False]),
            "apFlux": random.uniform(0, 1000),
            "apFluxErr": random.uniform(0, 10),
            "apFlux_flag": random.choice([True, False]),
            "apFlux_flag_apertureTruncated": random.choice([True, False]),
            "is_negative": random.choice([True, False]),
            "snr": random.uniform(0, 100),
            "psfFlux": random.uniform(0, 1000),
            "psfFluxErr": random.uniform(0, 10),
            "psfRa": random.uniform(0, 360),
            "psfRaErr": random.uniform(0, 0.1),
            "psfDec": random.uniform(-90, 90),
            "psfDecErr": random.uniform(0, 0.1),
            "psfFlux_psfRa_Cov": random.uniform(-1, 1),
            "psfFlux_psfDec_Cov": random.uniform(-1, 1),
            "psfRa_psfDec_Cov": random.uniform(-0.01, 0.01),
            "psfLnL": random.uniform(-1000, 0),
            "psfChi2": random.uniform(0, 1000),
            "psfNdata": random.randint(1, 100),
            "psfFlux_flag": random.choice([True, False]),
            "psfFlux_flag_edge": random.choice([True, False]),
            "psfFlux_flag_noGoodPixels": random.choice([True, False]),
            "trailFlux": random.uniform(0, 1000),
            "trailFluxErr": random.uniform(0, 10),
            "trailRa": random.uniform(0, 360),
            "trailRaErr": random.uniform(0, 0.1),
            "trailDec": random.uniform(-90, 90),
            "trailDecErr": random.uniform(0, 0.1),
            "trailLength": random.uniform(0, 10),
            "trailLengthErr": random.uniform(0, 1),
            "trailAngle": random.uniform(0, 360),
            "trailAngleErr": random.uniform(0, 10),
            "trailFlux_trailRa_Cov": random.uniform(-1, 1),
            "trailFlux_trailDec_Cov": random.uniform(-1, 1),
            "trailFlux_trailLength_Cov": random.uniform(-1, 1),
            "trailFlux_trailAngle_Cov": random.uniform(-1, 1),
            "trailRa_trailDec_Cov": random.uniform(-0.01, 0.01),
            "trailRa_trailLength_Cov": random.uniform(-0.01, 0.01),
            "trailRa_trailAngle_Cov": random.uniform(-1, 1),
            "trailDec_trailLength_Cov": random.uniform(-0.01, 0.01),
            "trailDec_trailAngle_Cov": random.uniform(-1, 1),
            "trailLength_trailAngle_Cov": random.uniform(-1, 1),
            "trailLnL": random.uniform(-1000, 0),
            "trailChi2": random.uniform(0, 1000),
            "trailNdata": random.randint(1, 100),
            "trail_flag_edge": random.choice([True, False]),
            "dipoleMeanFlux": random.uniform(0, 1000),
            "dipoleMeanFluxErr": random.uniform(0, 10),
            "dipoleFluxDiff": random.uniform(-100, 100),
            "dipoleFluxDiffErr": random.uniform(0, 10),
            "dipoleRa": random.uniform(0, 360),
            "dipoleRaErr": random.uniform(0, 0.1),
            "dipoleDec": random.uniform(-90, 90),
            "dipoleDecErr": random.uniform(0, 0.1),
            "dipoleLength": random.uniform(0, 10),
            "dipoleLengthErr": random.uniform(0, 1),
            "dipoleAngle": random.uniform(0, 360),
            "dipoleAngleErr": random.uniform(0, 10),
            "dipoleMeanFlux_dipoleFluxDiff_Cov": random.uniform(-1, 1),
            "dipoleMeanFlux_dipoleRa_Cov": random.uniform(-1, 1),
            "dipoleMeanFlux_dipoleDec_Cov": random.uniform(-1, 1),
            "dipoleMeanFlux_dipoleLength_Cov": random.uniform(-1, 1),
            "dipoleMeanFlux_dipoleAngle_Cov": random.uniform(-1, 1),
            "dipoleFluxDiff_dipoleRa_Cov": random.uniform(-1, 1),
            "dipoleFluxDiff_dipoleDec_Cov": random.uniform(-1, 1),
            "dipoleFluxDiff_dipoleLength_Cov": random.uniform(-1, 1),
            "dipoleFluxDiff_dipoleAngle_Cov": random.uniform(-1, 1),
            "dipoleRa_dipoleDec_Cov": random.uniform(-0.01, 0.01),
            "dipoleRa_dipoleLength_Cov": random.uniform(-0.01, 0.01),
            "dipoleRa_dipoleAngle_Cov": random.uniform(-1, 1),
            "dipoleDec_dipoleLength_Cov": random.uniform(-0.01, 0.01),
            "dipoleDec_dipoleAngle_Cov": random.uniform(-1, 1),
            "dipoleLength_dipoleAngle_Cov": random.uniform(-1, 1),
            "dipoleLnL": random.uniform(-1000, 0),
            "dipoleChi2": random.uniform(0, 1000),
            "dipoleNdata": random.randint(1, 100),
            "forced_PsfFlux_flag": random.choice([True, False]),
            "forced_PsfFlux_flag_edge": random.choice([True, False]),
            "forced_PsfFlux_flag_noGoodPixels": random.choice([True, False]),
            "snapDiffFlux": random.uniform(0, 1000),
            "snapDiffFluxErr": random.uniform(0, 10),
            "fpBkgd": random.uniform(0, 100),
            "fpBkgdErr": random.uniform(0, 10),
            "ixx": random.uniform(0, 100),
            "ixxErr": random.uniform(0, 10),
            "iyy": random.uniform(-100, 100),
            "iyyErr": random.uniform(0, 10),
            "ixy": random.uniform(-100, 100),
            "ixyErr": random.uniform(0, 10),
            "ixx_iyy_Cov": random.uniform(-1, 1),
            "ixx_ixy_Cov": random.uniform(-1, 1),
            "iyy_ixy_Cov": random.uniform(-1, 1),
            "ixxPSF": random.uniform(0, 100),
            "iyyPSF": random.uniform(0, 100),
            "ixyPSF": random.uniform(-50, 50),
            "shape_flag": random.choice([True, False]),
            "shape_flag_no_pixels": random.choice([True, False]),
            "shape_flag_not_contained": random.choice([True, False]),
            "shape_flag_parent_source": random.choice([True, False]),
            "extendedness": random.uniform(0, 1),
            "reliability": random.uniform(0, 1),
            "band": RandomLsst.band,
            "dipoleFitAttempted": random.choice([True, False]),
            "pixelFlags": random.choice([True, False]),
            "pixelFlags_bad": random.choice([True, False]),
            "pixelFlags_cr": random.choice([True, False]),
            "pixelFlags_crCenter": random.choice([True, False]),
            "pixelFlags_edge": random.choice([True, False]),
            "pixelFlags_nodata": random.choice([True, False]),
            "pixelFlags_nodataCenter": random.choice([True, False]),
            "pixelFlags_interpolated": random.choice([True, False]),
            "pixelFlags_interpolatedCenter": random.choice([True, False]),
            "pixelFlags_offimage": random.choice([True, False]),
            "pixelFlags_saturated": random.choice([True, False]),
            "pixelFlags_saturatedCenter": random.choice([True, False]),
            "pixelFlags_suspect": random.choice([True, False]),
            "pixelFlags_suspectCenter": random.choice([True, False]),
            "pixelFlags_streak": random.choice([True, False]),
            "pixelFlags_streakCenter": random.choice([True, False]),
            "pixelFlags_injected": random.choice([True, False]),
            "pixelFlags_injectedCenter": random.choice([True, False]),
            "pixelFlags_injected_template": random.choice([True, False]),
            "pixelFlags_injected_templateCenter": random.choice([True, False]),
        }

    @staticmethod
    def dia_forced_source() -> dict:
        return {
            "diaForcedSourceId": random.randint(100000, 200000),
            "diaObjectId": random.randint(10000, 20000),
            "ra": random.uniform(0, 360),
            "dec": random.uniform(-90, 90),
            "visit": random.randint(1000, 5000),
            "detector": random.randint(1, 189),
            "psfFlux": random.uniform(10, 1000),
            "psfFluxErr": random.uniform(0, 10),
            "midpointMjdTai": random.uniform(58000, 60000),
            "band": RandomLsst.band,
        }

    @staticmethod
    def dia_nondetection_limit() -> dict:
        return {
            "ccdVisitId": random.randint(1000000, 2000000),
            "midpointMjdTai": random.uniform(58000, 60000),
            "band": RandomLsst.band,
            "diaNoise": random.uniform(0.1, 10.0),
        }

    @staticmethod
    def ss_object() -> dict:
        return {
            "ssObjectId": random.randint(1, 1000),
            "discoverySubmissionDate": random.uniform(58000, 60000),
            "firstObservationDate": random.uniform(58000, 60000),
            "arc": random.uniform(0, 1000),
            "numObs": random.randint(1, 100),
            "MOID": random.uniform(0, 10),
            "MOIDTrueAnomaly": random.uniform(0, 360),
            "MOIDEclipticLongitude": random.uniform(0, 360),
            "MOIDDeltaV": random.uniform(0, 10),
            "u_H": random.uniform(10, 30),
            "u_G12": random.uniform(0, 1),
            "u_HErr": random.uniform(0, 1),
            "u_G12Err": random.uniform(0, 0.1),
            "u_H_u_G12_Cov": random.uniform(-0.1, 0.1),
            "u_Chi2": random.uniform(0, 100),
            "u_Ndata": random.randint(1, 50),
            "g_H": random.uniform(10, 30),
            "g_G12": random.uniform(0, 1),
            "g_HErr": random.uniform(0, 1),
            "g_G12Err": random.uniform(0, 0.1),
            "g_H_g_G12_Cov": random.uniform(-0.1, 0.1),
            "g_Chi2": random.uniform(0, 100),
            "g_Ndata": random.randint(1, 50),
            "r_H": random.uniform(10, 30),
            "r_G12": random.uniform(0, 1),
            "r_HErr": random.uniform(0, 1),
            "r_G12Err": random.uniform(0, 0.1),
            "r_H_r_G12_Cov": random.uniform(-0.1, 0.1),
            "r_Chi2": random.uniform(0, 100),
            "r_Ndata": random.randint(1, 50),
            "i_H": random.uniform(10, 30),
            "i_G12": random.uniform(0, 1),
            "i_HErr": random.uniform(0, 1),
            "i_G12Err": random.uniform(0, 0.1),
            "i_H_i_G12_Cov": random.uniform(-0.1, 0.1),
            "i_Chi2": random.uniform(0, 100),
            "i_Ndata": random.randint(1, 50),
            "z_H": random.uniform(10, 30),
            "z_G12": random.uniform(0, 1),
            "z_HErr": random.uniform(0, 1),
            "z_G12Err": random.uniform(0, 0.1),
            "z_H_z_G12_Cov": random.uniform(-0.1, 0.1),
            "z_Chi2": random.uniform(0, 100),
            "z_Ndata": random.randint(1, 50),
            "y_H": random.uniform(10, 30),
            "y_G12": random.uniform(0, 1),
            "y_HErr": random.uniform(0, 1),
            "y_G12Err": random.uniform(0, 0.1),
            "y_H_y_G12_Cov": random.uniform(-0.1, 0.1),
            "y_Chi2": random.uniform(0, 100),
            "y_Ndata": random.randint(1, 50),
            "medianExtendedness": random.uniform(0, 1),
        }
