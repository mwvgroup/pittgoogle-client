name: Test Package

on:
  workflow_dispatch:
  workflow_call:
  push:

jobs:
  run-tests:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.8", "3.9", "3.10", "3.11" ]

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: false

      - name: Install package dependencies
        run: poetry install --with tests

      - name: Run tests with coverage
        run: |
          pip install coverage
          coverage run -m unittest discover 
          coverage xml --omit="tests/*" -o coverage.xml
          coverage report --omit="tests/*"

      # Report test coverage to codacy for the python version being tested
      - name: Report partial coverage results
        if: ${{ github.event_name != 'release' }}
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) report --partial -l Python -r coverage.xml
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}

  # Tell codacy we are done reporting test coverage
  report-code-coverage:
    name: Report Code Coverage
    runs-on: ubuntu-latest
    needs: run-tests
    if: ${{ github.event_name != 'release' }}
    steps:
      - name: Finish reporting coverage
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) final
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}

  # Use this job for branch protection rules
  report-test-status:
    name: Report Test Status
    runs-on: ubuntu-latest
    needs: run-tests
    if: always()
    steps:
      - name: Report failure
        if: ${{ contains(needs.*.result, 'failure') }}
        run: exit 1
